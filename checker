#python

import argparse
from pysam import VariantFile

# get args
def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("input_vcf", help="Input VCF. Should contain only variants from genes with a particular MOI. I.e. all biallelic.")
    parser.add_argument("af_threshold", help="Filter threshold for gnomad_af annotation.")
    args = parser.parse_args()
    return args


def check_threshold_correct(af, tag, threshold):
    if (af <= threshold and tag == 'INCLUDE') or (af > threshold and tag == 'EXCLUDE'):
        return True
    else:
        return False


def check_vcf(in_vcf, thresh):
    # read in vcf
    data = VariantFile(in_vcf, 'r')
    num_correct = 0
    num_incorrect = 0
    total_recs = 0
    for rec in data.fetch():
        total_recs = total_recs + 1
        # filter_result should be either INCLUDE or EXCLUDE
        filter_result = str(rec.filter.keys()).strip('\[\'\]')
        # get gnomad AF values
        csq_index = list(data.header.info).index('CSQ')
        gnomade_index = list(data.header.info).index('gnomADe_AF')
        gnomadg_index = list(data.header.info).index('gnomADg_AF')
        try:
            eAF = float(rec.info['CSQ'][0].split('|')[23])
            gAF = float(rec.info['CSQ'][0].split('|')[20])
        except ValueError as err:
            print(err, 'AF info', rec.info['CSQ'][0].split('|')[23], rec.info['CSQ'][0].split('|')[20])
        # get MOI
        moi_index = list(data.header.info).index('MOI')
        try:
            moi = rec.info['MOI']
        except KeyError as err:
            print(err)
            continue
        # check filter_result is correct
        check_ex = check_threshold_correct(eAF, filter_result, thresh)
        check_gen = check_threshold_correct(gAF, filter_result, thresh)
        if not check_ex and check_gen:
            print(f'Incorrect. Filter result ({filter_result}) does not conform to desired threshold ({thresh}) for MOI ({moi}). AFs are {eAF} and {gAF}.')
            num_incorrect = num_incorrect + 1
        else:
            print(f'Record correctly filtered. Filter: {filter_result}, AFs: {eAF} & {gAF}, Threshold: {thresh}, MOI: {moi}.')
            num_correct = num_correct + 1
    return num_correct, num_incorrect, total_recs

def main():
    args = get_args()
    print(args)
    right, wrong, total = check_vcf(args.input_vcf, args.af_threshold)
    print(f'Total number of records assessed: {total}')
    print(f'Records tagged correctly: {right}')
    print(f'Records tagged incorrectly: {wrong}')
